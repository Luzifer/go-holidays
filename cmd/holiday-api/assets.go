// Code generated by go-bindata.
// sources:
// index.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _indexHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xac\x39\x7d\x53\xdb\x38\xf3\x7f\x37\x9f\x62\xcf\x7d\x6e\x4a\x7a\xb1\xfc\x12\x3b\x6f\x25\xcc\x43\x03\xa5\x14\x0a\xa5\xd0\xf6\xa0\xd3\x69\x14\x5b\x8e\x05\x8e\xe5\x4a\x72\x42\xca\xf0\xdd\x7f\xb3\xb2\x03\xe1\x86\xde\xf5\xfa\xfc\x3a\x6d\x59\x4b\xbb\xab\x7d\xdf\x95\xd8\xfc\x6d\xe7\x78\x74\x76\xfe\x6e\x17\x52\x3d\xcb\xb6\x1a\x9b\xf8\x03\x32\x9a\x4f\x87\x16\xcb\xad\xad\x06\xc0\x66\xca\x68\x8c\x00\xc0\xe6\x8c\x69\x0a\x51\x4a\xa5\x62\x7a\x68\x95\x3a\xb1\x7b\xd6\xfa\x56\xaa\x75\x61\xb3\x6f\x25\x9f\x0f\xad\x3f\xed\x0f\xdb\xf6\x48\xcc\x0a\xaa\xf9\x24\x63\x16\x44\x22\xd7\x2c\xd7\x43\x6b\x7f\x77\xc8\xe2\x29\x7b\x40\x99\xd3\x19\x1b\x5a\x73\xce\x16\x85\x90\x7a\x0d\x79\xc1\x63\x9d\x0e\x63\x36\xe7\x11\xb3\xcd\x47\x0b\x78\xce\x35\xa7\x99\xad\x22\x9a\xb1\xa1\xb7\x62\xf4\x9b\x6d\xc3\x59\xca\x80\x4e\xc4\x9c\x41\x1b\x0c\x63\x4d\xa7\x0a\x9e\xcf\x4a\xa5\x9f\x43\x24\x66\x0c\x12\x2e\x95\x06\x9e\x83\x4e\x19\xa0\x6e\x2f\x80\xe6\x4b\x10\x3a\x65\xd2\x7c\xaf\xce\x06\x24\xaa\x68\x9e\xd3\x44\x33\xf9\x1c\x49\x14\xab\x58\xda\x76\x7d\xaa\xe6\x3a\x63\x5b\xa9\xc8\x78\x4c\x97\x36\x2d\x38\xec\x88\xa8\x9c\xb1\x5c\x53\xcd\x45\xbe\xe9\x54\x08\x8d\x7b\x19\x5f\x0a\xa1\x95\x96\xb4\xb8\x67\x92\xf1\xfc\x0a\x24\xcb\x86\x96\xd2\xcb\x8c\xa9\x94\x31\x6d\x41\x2a\x59\x32\xb4\xd0\xa8\x6a\xe0\x38\x51\x9c\x5f\x2a\x12\x65\xa2\x8c\x93\x8c\x4a\x46\x22\x31\x73\xe8\x25\xbd\x76\x32\x3e\x51\x8e\x5e\x70\xad\x99\xb4\x27\x2b\xee\x4e\x9b\xb4\x49\xd7\x89\x94\x72\xee\xd6\x6c\x9d\xb2\x19\x23\x33\x9e\x93\x48\x29\xcb\x1c\x5e\xfd\xe1\xb9\x66\x53\xc9\xf5\x72\x68\xa9\x94\xfa\x61\xc7\xbe\x38\x0b\x5e\xbf\x2b\xe2\xd1\xb1\xf6\xb3\xf9\xce\xd5\x9f\xe2\xea\x75\x99\xbe\x49\xe2\xe3\x83\xd3\x77\xaf\x0e\xbf\xb3\xed\x37\xfc\x2a\xfc\xe0\x9c\xfc\x91\x05\x43\x0b\x22\x29\x94\x12\x92\x4f\x79\x3e\xb4\x68\x2e\xf2\xe5\x4c\x94\xca\x02\xe7\xff\x4f\x43\xa3\xc5\x82\xea\x28\xad\x55\x53\x65\xc1\x64\xca\xa4\xb8\x57\xf0\xe7\x54\x3b\xdc\x2d\xb2\xf9\xf4\xe4\xec\x80\xea\xb8\x13\x26\xfe\x85\xf3\xe6\x2c\x95\xe7\xd7\x8e\x8a\xc5\xc1\x72\xca\xdd\x58\x8d\xbc\x34\x54\xfb\xf9\xee\xdf\xab\x76\xef\xd4\xd7\x67\x6f\x0f\x43\x50\x29\x9f\x01\xcd\x63\x78\xcf\x54\x21\xf2\x98\x5c\x2a\x48\x84\x84\xfd\xdd\x1e\xa8\xb2\xc0\xd8\x06\x91\xd4\xc8\x2c\x63\x18\x26\xca\x10\xcc\x58\xcc\x29\x7c\x2b\x99\xe4\x6c\x2d\xba\x90\xf5\xa7\xed\xf7\x47\xfb\x47\x7b\x83\x75\xa6\xb1\x60\x2a\x7f\xa6\x61\x21\xe4\x15\xf0\x04\x96\xa2\x04\xcc\x1e\x13\xd5\x05\x9d\x32\x98\x73\x0a\x09\xcf\xd8\xc0\x71\x1e\xb0\xfb\xcc\x13\xc8\x34\xec\xef\x42\xff\xcb\x56\x6d\xa5\x4d\x15\x49\x5e\x68\x50\x32\xfa\x69\x6f\x60\xa5\x08\x55\xca\xe7\x4e\x9b\x74\x49\xfb\xfe\xdb\xb8\xe0\xf2\x81\x07\x1e\xf7\x42\xfb\xcd\xd2\xd9\x9b\x9c\x1e\xca\xa9\x2b\xfa\xcb\xf0\x22\xcc\xbd\x72\xe1\x7e\xbb\xbe\xd8\x1d\xbd\xee\x8e\x3a\xc7\x27\xc5\xc7\x97\xd3\xa3\x57\xe7\xd4\x9d\xfe\xd8\x0b\x5b\x9b\x4e\x25\xfc\xff\xa2\x8b\xbc\x33\xac\xe3\x91\x80\xf8\x77\x0b\x3f\xab\xca\xb4\xc3\xb7\x93\xf9\x45\xf1\x47\xbe\x73\xe2\x9f\xc5\x67\xef\x9d\x8f\x1f\x0f\xde\x24\xed\xc9\x9e\x14\x41\x39\x09\x93\xf9\xa7\xd3\x4f\x1f\xdf\x73\xff\xe8\x6f\x02\xea\x2f\xaa\x6c\xfe\xf6\x99\xe5\x31\x4f\xbe\x54\xde\xdb\x74\x56\x85\x78\x73\x22\xe2\x65\x8d\x13\xf3\x39\x44\x19\x55\x6a\x68\x61\xd9\xa2\x3c\x67\xd2\xba\x33\xc5\x83\xdd\xcc\x9e\xc5\xb6\xe7\x5b\xc0\xe3\xa1\x15\x73\x55\x64\x74\x69\x6d\x35\x9e\xc2\x0f\x6b\x57\xa3\x71\x96\x72\x05\x3c\x57\x9a\xe6\x11\xc3\xc8\x1d\xaf\x21\x8f\x81\x2b\xa0\x58\x2e\xe7\x2c\xe7\x58\x31\x17\x92\x16\x05\x93\x40\xa5\x28\x31\xa6\x97\xf0\x79\x2a\xec\x9a\x04\x32\x3e\x91\x54\x2e\xbf\x6c\xac\xbc\x32\xe5\x3a\x2d\x27\xc6\x17\x87\xe5\x77\x9e\x30\xe9\xdc\xa3\xab\x26\x2c\x52\x1e\xa5\x50\xeb\xa5\x56\x72\x56\x19\x15\xf3\x24\x61\x12\x0f\x8d\x44\x99\x6b\xcc\x1a\x02\x9f\xb8\x4e\x41\xa3\xcc\x2b\x49\x30\x2f\x22\x9a\x83\x64\xdf\x4a\xa6\x34\x50\x78\x73\x7a\x7c\x04\xa2\xd4\x45\xa9\x0d\x23\x0a\xaa\x60\x11\x4f\x78\x54\x73\x5a\x82\x90\xa0\x34\xd5\x0c\x16\x5c\xa7\x3c\x37\x3a\x56\x3b\xa5\xe2\xf9\x14\x3e\xef\x9f\x1e\x43\xdb\xeb\x74\x6c\x0f\x68\x56\xa4\xd4\xf6\xef\x30\x22\x11\x33\x75\xaf\x22\xcb\xc9\x82\x5f\xf1\x02\xb3\x9b\x08\x39\x75\xf0\xcb\xd9\x3f\x3d\xfe\x5a\xd1\x7f\xad\xe9\x9b\x04\x5e\xe1\xb1\xd8\x6d\xee\x14\x82\x0d\x14\x90\x5d\xd3\x59\x91\x31\xd8\x63\x72\x46\xf3\x65\xd3\xa4\x78\x24\x64\x1d\xa3\x28\x50\x25\x2d\x1e\x0d\xec\x5a\xb3\x5c\x71\x91\xa3\x73\xea\x92\xc3\x62\xd2\x68\x3c\x7d\x0a\x1f\x14\x9d\x32\x74\x2a\xbb\xdf\x81\x0f\xef\x0f\x41\x45\xd8\x16\x90\x62\xec\xdc\xd4\x9a\xd8\xc8\xee\xd6\xb9\x59\x32\x2a\x6f\x9d\x9b\x99\xc8\x75\x7a\xeb\xdc\xc4\x74\x79\x3b\x1e\x34\x6c\x18\x3f\x44\x1c\xc3\xf3\xe7\x1b\x68\x65\x2e\x59\xdc\x7c\xfe\x1c\x6c\xf8\x07\x2b\x19\x1e\x86\xfb\x18\xbe\x6e\x88\x02\x23\x8e\x66\xcd\xaf\x48\x99\x40\x2e\x34\x28\xa6\x2b\x65\x4b\x69\x3c\x8d\xc8\x28\x64\xa9\x58\x6c\xa8\x2b\xa1\x1e\x23\xaf\x7d\xca\x62\xc8\x38\xb6\x7b\x85\xb5\x50\x33\xc9\x62\xe3\xf4\x29\x9f\xb3\x1c\x0c\xb9\x61\x64\xb4\xfa\x55\x36\x31\x5d\x36\x1a\xbb\x95\x97\x14\x9a\xe6\xf3\xd8\x29\xd5\xf8\xcb\x86\x53\xaa\x26\xd8\xf0\x8a\xc5\x4c\xd2\xec\x61\xfc\xa2\x5e\x1f\x72\x8e\x1e\x38\x45\xef\xdd\xaf\xae\x6b\x5b\x31\x8b\x99\xe3\xbb\x5e\x17\x39\xd6\x20\xb2\x3d\xa2\x95\xac\xf7\x7c\x79\xbe\x0a\x12\xc3\x0c\x11\x57\x0c\xec\xc9\x72\x8d\xc7\xea\x0b\xd9\xbc\x5e\x97\xea\x25\x9d\x53\x89\x8d\xa3\x26\x87\x8d\x0f\x8a\xa9\xb5\x80\xf7\x07\x3b\xbb\x3f\x1d\xdd\x88\xdc\xac\x32\xa2\xf9\x57\x41\x1c\xcf\x5d\xd3\xc7\xf1\xdc\xbf\x95\xe5\x38\xd2\x62\xc2\x6a\x95\x1a\x47\xe2\x2e\x9f\x33\x3e\xe3\xd8\x41\x25\x03\x96\x27\x42\x46\x2c\x06\x25\xa0\xc8\x18\x55\x0c\xb0\xc4\x41\xce\xa3\x2a\x93\x8d\x75\xb7\xdf\xed\x57\xc9\x50\x35\x53\x55\xe7\xc3\xf6\xbb\x7d\x58\xf0\x2c\x83\x3a\xab\x0c\x01\x86\xc6\xeb\xb3\xb3\x77\xe0\xbb\xee\xd8\x74\xe9\xba\x7c\x50\x29\xe9\x12\xdb\x2e\x72\xc4\x9e\xbd\x84\x05\xc5\x74\x8b\x22\xa6\x54\x52\x66\x77\x94\x81\x1b\x8c\xeb\xfe\x2c\x4d\xaa\x99\x7a\x3a\xa7\x19\x8f\xc9\x1d\x52\x88\xec\x6b\x6e\xb5\x62\x2c\x86\xf5\xf4\x42\x32\xcc\x08\x9e\x47\x59\x19\xb3\x18\x9c\xfb\x0c\x46\x6d\x9e\x56\x72\x25\x42\xce\xa8\x6e\x34\x76\x69\x94\x02\xab\x33\x2d\x57\x5c\x69\x85\xc5\x3b\x41\x21\xae\xd8\xd2\x04\xe9\x18\x47\xee\xf1\x00\x8e\xe8\xcc\x54\x76\x33\x0e\xd7\x95\x9a\xe7\xb0\x9b\x4f\x33\xae\x52\x73\x17\x28\xb1\x6c\xd8\x30\xce\x44\x44\x33\xfe\x9d\xc5\x5f\x6b\xda\x6d\x98\xd1\xa2\xc0\x0a\x24\x92\xb5\x8a\x5c\xe3\x99\xf8\x54\xb0\x71\xc5\x96\xa6\x53\xe4\xff\x54\x11\x30\x48\xc6\x31\xd5\x15\x6b\xa5\x25\x72\x96\xac\x90\x4c\xad\x5a\xd2\x4a\x52\xc4\x42\x31\xc7\xe7\xe7\xe7\xe7\xf6\xdb\xb7\xf6\xce\xce\x18\x2d\x54\xf5\x2d\x1b\xc6\x05\x5e\x52\xe2\xaf\x35\xb7\xb3\x15\x09\xc5\x8e\xb5\x43\x35\x3b\xe3\x33\xb6\x3a\xa2\x0a\x0e\x3e\x63\xdf\x45\x7e\x67\x0b\xc5\xe4\x9c\x49\x90\x65\x9e\x23\x4e\x1d\x3b\x8d\xc6\x78\x3c\xbe\x54\x22\x6f\x7c\x6e\x3c\xb9\x69\x3c\x79\x82\x96\x18\x80\x75\xc4\x16\x70\xce\xa8\x7c\xa6\x60\x87\x2e\xad\x56\xe3\xc9\x93\x87\xd6\x1a\x00\x62\x3f\x89\x2b\xe4\xf2\x92\xa6\x52\x69\x3a\xb5\x1a\x4f\x9e\xdc\x22\x36\x4a\x37\x00\x0b\x03\xdc\x76\x3d\xdb\xf5\x0c\x8f\x35\x2d\x1e\x6c\x9e\xb9\xee\xc0\xfc\xbd\xb0\x1a\x86\x7e\x4d\x94\x3d\x21\x62\x78\x25\xd1\x91\xff\x20\xc7\x01\x95\x89\x64\xfc\x87\x62\x04\xb6\x17\xfc\x50\x0c\xdc\x7c\x28\x46\xe3\x0b\x1a\x07\x73\x6b\x24\xb0\x81\x4d\x4a\x13\x00\x8d\xc6\x7e\x35\x9f\x62\x92\x26\x59\x89\x11\xc2\x73\x58\x48\xae\xd1\xb0\x7b\xc2\x64\xd6\x55\x2e\x16\x78\x73\x2b\xf5\x7d\x3d\x13\xc9\x5a\xeb\xc5\xf0\x5f\x32\x0d\x74\x4e\x79\x46\x27\x19\xba\x5f\xf1\x98\x19\xcf\xd4\xa3\xc5\x2a\xef\xa7\xac\xba\xe1\x89\x32\x4a\x2b\xef\xce\x18\x81\x5d\x6e\xee\x78\x55\x0f\xa7\xd8\x20\x55\xc9\xc0\x8c\x00\x45\x99\x65\xf6\xaa\xa6\xd4\x77\xc3\xcf\x92\x15\x42\x71\x2d\xfe\xcd\xc8\x22\xee\xf9\x2f\xf1\x02\x9a\x8a\x18\x44\x8e\x93\xd0\x82\x4d\x14\x47\xfb\x7d\xa6\x69\xc6\xa4\x22\x33\x76\xcf\xf6\x6e\xc9\x69\xae\x66\x37\x27\xe6\xf3\x7a\xc8\xab\xc0\x0a\xa6\x7f\xb9\x33\xfd\xbd\x40\xd6\x6a\xfc\xab\xd0\xec\x48\x48\x1c\x10\x01\x0b\xab\x9d\xd1\x09\xde\xc7\x3e\xe2\xb5\x41\x89\x52\xe2\x84\x97\xc3\x9e\xc1\xb4\xb6\x36\xd5\x1c\x33\x03\x6f\xdf\x56\xcf\xb5\x20\x65\x7c\x9a\xea\x0a\xc6\x9b\xc6\x4b\x71\x3d\xb4\x5c\x70\xc1\x0f\xcd\x3f\x0b\xcc\xc5\x6e\x68\x25\x3c\xcb\x06\x4f\xbb\xee\xcb\xee\xab\x9d\x17\x10\x89\x4c\xc8\xc1\xd3\x24\x49\x5e\x80\x31\x27\x17\xf9\x00\xe8\x44\x89\xac\xd4\xec\x05\x68\x51\x0c\xc0\x7d\x01\x13\x21\x63\x26\x0d\x28\xf1\x20\x84\x6a\x39\x53\x1e\xc7\x2c\x1f\x5a\x5a\x96\xcc\xda\xda\x2c\xa8\x4e\x21\x1e\x5a\x6f\xdd\x96\x0b\x87\x9e\x17\xb6\x3c\x2f\x84\x43\xaf\xed\xd6\x40\xe0\xb7\xbc\xc0\x87\x43\x3f\x74\x5b\x28\x9c\x01\x5c\xb8\xc0\x01\x1b\x89\xd7\x58\x78\x7e\x8f\xb4\x5b\x9e\xdb\x27\x2e\x8c\x3c\xaf\x4d\x7a\xad\x7e\x9f\x74\xc1\xf3\xfa\xc4\x6d\xf5\xfa\xa4\xb3\x0e\x8e\x3c\xdf\x47\xd8\x47\x0c\xdf\x25\x61\xab\xdb\x43\x8c\x7b\x70\x84\xd8\x7e\xab\xeb\x13\x17\x3c\xbf\x4d\x82\x56\xb7\x43\xda\xeb\xe0\xc8\xf3\xbb\xa4\xdd\xea\xb9\xa4\x0f\x9e\x1f\x92\xb0\xd5\xeb\x1a\x8c\x3b\xd0\x9c\xd2\x6f\xf5\xbb\xc8\xba\xed\x92\x4e\xcb\x73\x3d\xc4\x6e\x07\x24\x68\x79\x6e\x9b\xf8\x16\x8e\x21\xd9\xd0\xaa\x47\x85\x11\xda\xf8\xce\xfe\x5a\xd2\x5c\x61\x27\xb0\xab\x2b\xc6\x00\xb9\x14\xd7\xe0\xb9\x9d\xe2\xfa\xc5\x5d\x44\x88\x48\x0b\x9b\xca\xd9\x63\x56\xf1\x42\x62\x8c\x59\x59\x25\x20\x7d\xf3\xe1\x81\xe7\xf5\x48\xb7\xe5\x79\x1d\x12\x1a\xbb\xf4\xcc\x7a\x80\xc6\x6f\xe3\x86\xeb\x19\x1b\xb4\x3b\x28\x7f\x9f\xf8\xe0\xb5\xfb\x08\xf6\x48\x00\x5e\xe0\x13\x1f\x41\x83\x81\x96\xee\xf5\x8c\x95\xba\x68\xbc\xc0\x60\xe0\x6a\xd8\x33\xa7\x06\x3d\x12\xb6\xc2\x36\x2e\x87\x01\x71\x5b\xa1\x87\xec\xc2\x3e\xe9\x22\x88\x18\x1d\x97\xb4\x5b\x41\x1f\x31\x3a\x6d\xe2\xb7\x82\x36\x1a\xac\xeb\x91\xa0\x15\xb8\xc4\x83\xd1\x1a\xec\x75\x3b\xc4\x6b\x05\x3e\xca\xdd\xed\xe1\x29\x1d\xe2\xc3\xc8\xeb\xb5\x89\x87\x27\x76\xc0\xeb\x75\x89\xdf\xea\x78\xa4\x07\x5e\xdf\x25\xfd\x56\x07\x15\x1b\x79\xfd\x80\x84\xad\x0e\xc6\x87\xd7\xef\x92\x6e\xab\xdb\x26\x3e\xce\x03\xc4\x6b\x75\xd1\x43\x23\xdf\x44\x4d\xcf\xc5\x65\xaf\x83\xae\x0d\x48\x7f\x1d\x1c\xf9\x9e\x4f\xba\xad\x7e\x9b\x78\xe0\xbb\xc6\x34\x1d\xe2\x82\xef\x86\x24\x40\x10\x79\xb8\x21\xf1\x5a\x9e\xeb\x93\x00\x7c\xb7\x8d\xc6\x77\xbb\x46\x12\x13\x9e\x1e\xca\x3d\xf2\x7a\x1e\x3a\xc2\xef\x61\x2c\x74\xcc\x86\x6f\x14\x0a\xbb\xc6\x29\x81\xd1\x39\xec\x1a\x6f\x75\x10\x29\xec\xe0\x86\x6f\x42\x2d\xf4\x0d\x8c\x02\x1d\x7a\x81\x87\x47\xb4\x3b\x86\x6d\xdb\xf8\xb1\xdd\xc5\xa0\x0e\x3c\x0c\xb7\xc0\x84\x5b\xe0\xe1\x3a\xfe\x0f\x17\x8f\x07\xdc\x7a\x24\xe1\x9d\xf4\x3e\x94\x1c\x35\x9f\x6e\x6d\x3a\x74\x6b\xd3\x04\xe5\x16\x79\x50\x7f\x06\xa9\xc0\xd6\x4a\x56\x21\x78\x43\x73\x3e\x33\x9d\x7b\x80\x4b\x11\xd5\xf6\x82\xce\x19\x84\x1d\x77\xa6\x00\x2b\xba\xcd\x73\x5b\x94\xfa\xf6\xbf\x57\x6c\x99\x48\x3a\x63\x0a\xd6\x31\x6f\xdc\xdf\x5b\x9e\xeb\xfe\x7e\x73\x17\xfb\x03\x89\xb3\x00\xdb\x70\x9b\xb7\xbe\xfb\x7b\xab\xf3\xd8\x9e\xed\x87\x31\x9b\x36\x6f\x03\xf7\xf7\x56\xef\x31\x04\xcf\x35\xfb\xb7\xff\xad\x1e\x67\x36\x66\xf4\xba\x7a\x82\x1c\x84\xae\x5b\x5c\x37\x6f\x7e\x5a\xad\x5c\xe4\xec\xf6\x21\xf6\xaf\xa8\x7f\xbb\xe9\x54\xf6\x5c\x7b\x78\xba\x3c\x31\xf3\xe7\x46\xce\x70\xf6\xc4\x26\x68\x86\xe7\xd5\x83\xd8\x33\x05\x6f\xe8\x9c\x9e\x56\x8f\x22\x45\x56\x4e\x79\x8e\xb7\x92\xd5\x8b\xd0\x2f\xbc\x96\x5c\x9a\x89\xd7\xf1\x88\xe7\x93\xa0\xfe\x7a\xf4\xa5\xe4\x91\x37\x45\xa1\x76\x27\xef\x0f\x27\x47\x27\xdf\x0f\x8b\xfc\x60\xff\x6a\x37\x96\xef\xe6\xdd\xec\x78\xd9\x1f\xf9\xdd\xf4\xf5\xc9\x1f\x7f\x16\x3d\x1a\xbc\xbd\xde\x3e\xf9\x17\xef\x24\xb6\x0d\xfb\xd5\x60\x0c\x34\xcb\x20\x12\xb3\x82\x67\x2c\x5e\x69\x0b\x1b\x13\x96\x89\x45\xb3\x85\xdd\xb9\x9e\xa0\x81\xe7\x31\x9f\xf3\xb8\xa4\x99\x79\x25\x53\x38\x19\xe6\x8c\xe1\x6c\xfd\xbf\xd8\xe6\x47\xaf\xb0\x97\xea\x2f\x6f\x94\xff\x6c\xab\x0f\xe1\xc5\x2e\x3b\x48\xf6\x8e\x8e\x2f\xa9\xeb\x76\xdf\xbe\xdd\x69\x9f\xbf\xdc\x77\xb7\xdb\xc7\xa7\x17\xc7\x27\x13\xb6\xd7\xf9\xee\x27\xfe\xb9\x9b\x96\xbd\x9f\xb7\xd5\x2f\xa8\x34\xa3\xf2\x8a\xc5\x8e\x4b\xda\xa4\x53\x7f\xfc\xa4\x06\xb3\x37\xdb\xdf\x0f\x76\xbe\x75\xae\x4e\xc5\xc1\xb7\x8b\x83\x7c\xbb\xf3\xe1\xe8\x50\xbf\xa3\xfb\x97\xbd\xef\x67\xfe\xec\x55\xfe\xa9\x74\xf6\x4e\x45\x99\x4e\xff\x85\xb7\x1f\xbe\xf6\xfd\x67\x23\x29\xf3\x08\x73\x67\xa3\x79\x03\xff\xd9\x78\xf6\xb4\x7e\xd9\x7a\xd6\x24\xa9\x9e\x65\x1b\x95\xc0\x1b\x8f\xec\x34\x9b\xcd\x17\x70\xdb\x7c\x51\xcf\x58\xf7\x7c\x37\x9d\xea\x81\x6d\xd3\xa9\x7e\x29\xf2\x7f\x01\x00\x00\xff\xff\xe3\xd4\x55\x6f\x25\x19\x00\x00")

func indexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_indexHtml,
		"index.html",
	)
}

func indexHtml() (*asset, error) {
	bytes, err := indexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "index.html", size: 6437, mode: os.FileMode(436), modTime: time.Unix(1486030490, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"index.html": indexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"index.html": &bintree{indexHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

